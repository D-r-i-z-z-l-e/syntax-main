import { ArchitectLevel1, ArchitectLevel2, ArchitectLevel3 } from '../types/architect';

class ArchitectService {
  private static instance: ArchitectService;
  private readonly MODEL = 'claude-3-5-sonnet-latest';
  private apiKey: string;

  private constructor() {
    this.apiKey = process.env.CLAUDE_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('CLAUDE_API_KEY environment variable is required');
    }
  }

  public static getInstance(): ArchitectService {
    if (!ArchitectService.instance) {
      ArchitectService.instance = new ArchitectService();
    }
    return ArchitectService.instance;
  }

  private cleanJsonString(str: string): string {
    str = str.replace(/^```json\s*|\s*```$/g, '');
    str = str.replace(/^`|`$/g, '');
    
    str = str.replace(/[\n\r\t]/g, ' ');
    str = str.replace(/\s+/g, ' ');
    str = str.replace(/\\([^"\\\/bfnrt])/g, '$1');
    
    return str;
  }

  private async callClaude(systemPrompt: string, userMessage: string) {
    console.log('Calling Claude with system prompt:', systemPrompt.substring(0, 500) + '...');
    console.log('User message:', userMessage.substring(0, 200) + '...');

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01',
        'x-api-key': this.apiKey,
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        model: this.MODEL,
        max_tokens: 4096,
        temperature: 0.7,
        system: systemPrompt,
        messages: [{ role: 'user', content: userMessage }]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Claude API error response:', errorText);
      throw new Error(`Claude API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.content || !data.content[0] || !data.content[0].text) {
      throw new Error('Invalid response format from Claude API');
    }

    try {
      const cleanedText = this.cleanJsonString(data.content[0].text);
      console.log('Cleaned response:', cleanedText.substring(0, 200) + '...');
      const parsedResponse = JSON.parse(cleanedText);
      console.log('Parsed response:', JSON.stringify(parsedResponse).substring(0, 200) + '...');
      return parsedResponse;
    } catch (e) {
      console.error('Failed to parse Claude response:', {
        error: e,
        rawResponse: data.content[0].text.substring(0, 200) + '...',
        cleanedResponse: this.cleanJsonString(data.content[0].text).substring(0, 200) + '...'
      });
      throw new Error(`Failed to parse Claude response: ${e instanceof Error ? e.message : String(e)}`);
    }
  }

  async generateLevel1(requirements: string[]): Promise<ArchitectLevel1> {
    console.log('Generating architectural vision with requirements:', requirements);
    const systemPrompt = `You are a supremely experienced software architect with decades of experience across all domains of software engineering. 
    
You are tasked with creating a comprehensive architectural vision based on the user requirements provided.

Think deeply about the requirements as if accessing your subconscious. Your vision should be extremely detailed and precise, covering all aspects of the system including:

1. Overall architectural pattern and approach
2. Technology stack recommendations
3. Data modeling and storage
4. API design principles
5. Security considerations
6. Scalability aspects
7. User experience guidelines
8. Performance requirements
9. Cross-cutting concerns
10. System boundaries and integration points

Your vision should be thorough enough that another experienced developer could use it as a comprehensive blueprint. Don't limit yourself to surface-level details - go deep into the architectural considerations and design decisions, explaining why each choice makes sense given the requirements.

IMPORTANT: Respond with ONLY a valid JSON object in this exact format:
{
  "visionText": "Your detailed architectural vision here (can be multiple paragraphs with detailed thinking)"
}`;

    return this.callClaude(systemPrompt, `Requirements:\n${requirements.join('\n')}`);
  }

  async generateLevel2(requirements: string[], visionText: string): Promise<ArchitectLevel2> {
    console.log('Generating project structure based on vision');
    const systemPrompt = `You are a highly experienced software architect with a deep understanding of project organization and code structure. 

Your task is to create a comprehensive project folder structure based on the architectural vision and requirements provided.

This structure should be a complete skeleton of the project, organizing files and directories in a logical manner that reflects both the functional requirements and the architectural decisions explained in the vision.

For each folder in the structure:
1. Provide a descriptive name that follows standard naming conventions
2. Include a clear description of its purpose
3. Explain why this component is needed
4. Consider dependencies between components

Think carefully about:
- Proper separation of concerns
- Maintainability and scalability
- Following design patterns appropriate for the project
- Industry best practices for the relevant technology stack

IMPORTANT: Respond with ONLY a valid JSON object in this exact format:
{
  "rootFolder": {
    "name": "project-root",
    "description": "Root directory description",
    "purpose": "Main project folder",
    "subfolders": [
      {
        "name": "subfolder-name",
        "description": "Subfolder description",
        "purpose": "Subfolder purpose",
        "subfolders": []
      }
    ]
  }
}`;

    const response = await this.callClaude(systemPrompt, `
Requirements:
${requirements.join('\n')}

Architectural Vision:
${visionText}`);
    
    console.log('Level 2 response structure check:', {
      hasRootFolder: 'rootFolder' in response,
      rootFolderType: typeof response.rootFolder,
      rootFolderKeys: response.rootFolder ? Object.keys(response.rootFolder) : 'N/A'
    });
    
    if (!response.rootFolder) {
      console.error('Invalid folder structure response:', response);
      throw new Error('Invalid folder structure response: missing rootFolder');
    }
    return response;
  }

  async generateLevel3(
    requirements: string[],
    visionText: string,
    folderStructure: ArchitectLevel2
  ): Promise<ArchitectLevel3> {
    console.log('Generating file context implementation details');
    
    // Validate folder structure before using
    if (!folderStructure || !folderStructure.rootFolder) {
      console.error('Invalid folderStructure provided to generateLevel3:', folderStructure);
      throw new Error('Invalid folder structure: missing rootFolder property');
    }
    
    const systemPrompt = `You are a master software engineer with extraordinary attention to detail.

Your task is to create detailed implementation instructions for each file in the project structure, based on the architectural vision and the folder structure provided.

For each file identified in the project structure, provide:
1. A comprehensive description of what the file should contain in plain English
2. Detailed implementation guidance including function signatures, parameters, return values
3. Specific technologies, libraries, frameworks that should be used
4. Exact imports that will be needed
5. How this file interacts with other components
6. Error handling considerations
7. Performance optimization suggestions

Analyze the dependencies between files and create an implementation order that minimizes circular dependencies and follows a logical build sequence.

Write as if you are guiding a junior developer through implementing each file, leaving no ambiguity about what needs to be done.

IMPORTANT: Respond with ONLY a valid JSON object in this exact format:
{
  "implementationOrder": [
    {
      "name": "filename",
      "path": "file path",
      "type": "file type",
      "description": "Comprehensive file description in plain English",
      "purpose": "What this file accomplishes",
      "dependencies": ["list of dependencies"],
      "components": [
        {
          "name": "component name",
          "type": "component type",
          "purpose": "component purpose",
          "dependencies": ["component dependencies"],
          "details": "detailed implementation instructions"
        }
      ],
      "implementations": [
        {
          "name": "function/method name",
          "type": "function/class/constant/etc",
          "description": "what this implements",
          "parameters": [
            {
              "name": "param name",
              "type": "param type",
              "description": "param description"
            }
          ],
          "returnType": "return type if applicable",
          "logic": "step by step implementation details in plain English"
        }
      ],
      "additionalContext": "any other implementation details that the developer should know"
    }
  ]
}`;

    const response = await this.callClaude(systemPrompt, `
Requirements:
${requirements.join('\n')}

Architectural Vision:
${visionText}

Folder Structure:
${JSON.stringify(folderStructure, null, 2)}`);
    
    if (!response.implementationOrder || !Array.isArray(response.implementationOrder)) {
      console.error('Invalid implementation plan response:', response);
      throw new Error('Invalid implementation plan response: missing or invalid implementationOrder');
    }
    return response;
  }
}

export const architectService = ArchitectService.getInstance();
