import { NextRequest, NextResponse } from 'next/server';
import { architectService } from '../../../lib/services/architect.service';

export async function POST(req: NextRequest) {
  try {
    console.log('=== ARCHITECT API REQUEST RECEIVED ===');
    
    const body = await req.json();
    const { level, requirements, visionText, folderStructure } = body;
    
    console.log(`Architect API level ${level} request received`);
    console.log(`Request body:`, JSON.stringify({
      level,
      requirementsCount: requirements?.length,
      hasVisionText: !!visionText,
      hasFolderStructure: !!folderStructure,
      folderStructureType: folderStructure ? typeof folderStructure : 'undefined'
    }));
    
    if (!requirements || !Array.isArray(requirements)) {
      console.log('ERROR: Valid requirements array is required');
      return NextResponse.json({ error: 'Valid requirements array is required' }, { status: 400 });
    }
    
    let result;
    switch (level) {
      case 1:
        // Level 1: Generate architectural vision
        console.log('Generating level 1: Architectural Vision');
        result = await architectService.generateLevel1(requirements);
        break;
        
      case 2:
        // Level 2: Generate project structure based on vision
        console.log('Generating level 2: Project Structure');
        if (!visionText) {
          console.log('ERROR: Vision text is required for level 2');
          return NextResponse.json({ error: 'Vision text is required for level 2' }, { status: 400 });
        }
        result = await architectService.generateLevel2(requirements, visionText);
        break;
        
      case 3:
        // Level 3: Generate implementation plan based on vision and structure
        console.log('Generating level 3: Implementation Plan');
        if (!visionText) {
          console.log('ERROR: Vision text is required for level 3');
          return NextResponse.json({ error: 'Vision text is required for level 3' }, { status: 400 });
        }
        
        if (!folderStructure) {
          console.log('ERROR: Missing folder structure for level 3');
          return NextResponse.json({ 
            error: 'Missing required inputs for level 3: ["folder structure"]' 
          }, { status: 400 });
        }
        
        // Ensure folder structure has a rootFolder property
        const normalizedFolderStructure = typeof folderStructure === 'object' && 'rootFolder' in folderStructure && folderStructure.rootFolder
          ? folderStructure
          : { 
              rootFolder: typeof folderStructure === 'object' ? folderStructure : {
                name: "project-root",
                description: "Root directory for the project",
                purpose: "Main project folder",
                subfolders: []
              }
            };
        
        console.log('Proceeding with normalized folder structure');
        
        result = await architectService.generateLevel3(requirements, visionText, normalizedFolderStructure);
        break;
        
      default:
        console.log('ERROR: Invalid architect level:', level);
        return NextResponse.json({ error: 'Invalid architect level' }, { status: 400 });
    }
    
    console.log(`Architect API level ${level} completed successfully`);
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('=== ERROR IN ARCHITECT API ===');
    console.error(error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to generate architect output' },
      { status: 500 }
    );
  }
}
