import { ArchitectLevel1, ArchitectLevel2, ArchitectLevel3 } from '../types/architect';

class ArchitectService {
  private static instance: ArchitectService;
  private readonly MODEL = 'claude-3-5-sonnet-latest';
  private apiKey: string;

  private constructor() {
    this.apiKey = process.env.CLAUDE_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('CLAUDE_API_KEY environment variable is required');
    }
  }

  public static getInstance(): ArchitectService {
    if (!ArchitectService.instance) {
      ArchitectService.instance = new ArchitectService();
    }
    return ArchitectService.instance;
  }

  private cleanJsonString(str: string): string {
    // Find the first { and the last }
    const startIndex = str.indexOf('{');
    const endIndex = str.lastIndexOf('}');
    
    if (startIndex === -1 || endIndex === -1 || endIndex <= startIndex) {
      console.error('Cannot find valid JSON object in the string');
      throw new Error('Cannot find valid JSON object in the response');
    }
    
    // Extract the JSON part
    let jsonPart = str.substring(startIndex, endIndex + 1);
    
    // Clean up any issues with the JSON string
    jsonPart = jsonPart.replace(/[\n\r\t]/g, ' ');
    jsonPart = jsonPart.replace(/\s+/g, ' ');
    jsonPart = jsonPart.replace(/\\([^"\\\/bfnrt])/g, '$1');
    
    return jsonPart;
  }

  private extractJsonFromText(text: string): string {
    try {
      // First, try to find JSON between ```json and ``` markers
      const jsonRegex = /```json\s*([\s\S]*?)\s*```/;
      const match = text.match(jsonRegex);
      
      if (match && match[1]) {
        return match[1];
      }
      
      // If that fails, try to find the first { and last } that contain valid JSON
      return this.cleanJsonString(text);
    } catch (error) {
      console.error('Error extracting JSON from text:', error);
      throw new Error('Failed to extract JSON from response');
    }
  }

  private async callClaude(systemPrompt: string, userMessage: string) {
    console.log('Calling Claude with system prompt:', systemPrompt.substring(0, 500) + '...');

    try {
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01',
          'x-api-key': this.apiKey,
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.MODEL,
          max_tokens: 4096,
          temperature: 0.2, // Lower temperature for more deterministic JSON generation
          system: systemPrompt,
          messages: [{ role: 'user', content: userMessage }]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Claude API error response:', errorText);
        throw new Error(`Claude API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data.content || !data.content[0] || !data.content[0].text) {
        throw new Error('Invalid response format from Claude API');
      }

      try {
        const rawText = data.content[0].text;
        const jsonText = this.extractJsonFromText(rawText);
        console.log('Extracted JSON (first 200 chars):', jsonText.substring(0, 200) + '...');
        
        const parsedResponse = JSON.parse(jsonText);
        return parsedResponse;
      } catch (e) {
        console.error('Failed to parse Claude response:', {
          error: e,
          rawResponse: data.content[0].text.substring(0, 200) + '...'
        });
        
        // Fallback for level 3: Generate a minimal valid response
        if (systemPrompt.includes('implementationOrder')) {
          console.log('Falling back to minimal valid implementation response');
          return { 
            implementationOrder: [
              {
                name: "app.js",
                path: "src",
                type: "JavaScript",
                description: "Main application entry point",
                purpose: "Initialize the application",
                dependencies: [],
                components: [
                  {
                    name: "App",
                    type: "Function",
                    purpose: "Main app component",
                    dependencies: [],
                    details: "Initializes the application and sets up routes"
                  }
                ],
                implementations: [
                  {
                    name: "init",
                    type: "function",
                    description: "Initializes the application",
                    parameters: [],
                    returnType: "void",
                    logic: "Set up the application environment and start the server"
                  }
                ],
                additionalContext: "This is a fallback implementation due to parsing error."
              }
            ]
          };
        }
        
        throw new Error(`Failed to parse Claude response: ${e instanceof Error ? e.message : String(e)}`);
      }
    } catch (error) {
      console.error('Error in Claude API call:', error);
      throw error;
    }
  }

  async generateLevel1(requirements: string[]): Promise<ArchitectLevel1> {
    console.log('Generating comprehensive architectural vision');
    const systemPrompt = `You are an expert software architect.

Your task is to create a detailed architectural vision based on the requirements.

The vision should comprehensively cover:
1. Overall architectural pattern
2. Technology choices
3. Component breakdown
4. Data flow
5. Security considerations
6. Scalability approach

IMPORTANT: You MUST respond with a JSON object in EXACTLY this format:
{
  "visionText": "Your detailed architectural vision here (in plain text, with paragraphs separated by newlines)"
}

NO OTHER TEXT before or after the JSON.
NO explanation.
NO conversation.
ONLY the JSON object.`;

    return this.callClaude(systemPrompt, `Requirements:\n${requirements.join('\n')}`);
  }

  async generateLevel2(requirements: string[], visionText: string): Promise<ArchitectLevel2> {
    console.log('Generating complete project skeleton with all files');
    const systemPrompt = `You are an expert software architect.

Your task is to create a complete project structure based on the architectural vision and requirements provided.

The structure must include all folders AND files needed for a complete project.

IMPORTANT: You MUST respond with a JSON object in EXACTLY this format:
{
  "rootFolder": {
    "name": "project-root",
    "description": "Root directory description",
    "purpose": "Main project folder",
    "files": [
      {
        "name": "filename.ext",
        "description": "Detailed description of this file",
        "purpose": "What this file accomplishes"
      }
    ],
    "subfolders": [
      {
        "name": "subfolder-name",
        "description": "Subfolder description",
        "purpose": "Subfolder purpose",
        "files": [
          {
            "name": "filename.ext",
            "description": "Detailed description of this file",
            "purpose": "What this file accomplishes"
          }
        ],
        "subfolders": []
      }
    ]
  }
}

NO OTHER TEXT before or after the JSON.
NO explanation.
NO conversation.
ONLY the JSON object.`;

    return this.callClaude(systemPrompt, `
Requirements:
${requirements.join('\n')}

Architectural Vision:
${visionText}`);
  }

  async generateLevel3(
    requirements: string[],
    visionText: string,
    folderStructure: ArchitectLevel2
  ): Promise<ArchitectLevel3> {
    console.log('Generating implementation contexts for key files');
    
    // Validate folder structure before using
    if (!folderStructure || !folderStructure.rootFolder) {
      console.error('Invalid folderStructure provided to generateLevel3:', folderStructure);
      throw new Error('Invalid folder structure: missing rootFolder property');
    }
    
    // Extract the most important files from the folder structure
    const keyFiles = this.extractKeyFiles(folderStructure.rootFolder);
    console.log(`Selected ${keyFiles.length} key files for implementation context`);
    
    const systemPrompt = `You are an expert software developer.

Your task is to create detailed implementation instructions for key files in a project.

IMPORTANT: You MUST respond with a JSON object in EXACTLY this format:
{
  "implementationOrder": [
    {
      "name": "filename.ext",
      "path": "file path",
      "type": "file type",
      "description": "File description",
      "purpose": "What this file accomplishes",
      "dependencies": ["list of dependencies"],
      "components": [
        {
          "name": "component name",
          "type": "component type",
          "purpose": "component purpose",
          "dependencies": [],
          "details": "implementation details"
        }
      ],
      "implementations": [
        {
          "name": "function name",
          "type": "function/class/etc",
          "description": "what this implements",
          "parameters": [
            {
              "name": "param name",
              "type": "param type",
              "description": "param description"
            }
          ],
          "returnType": "return type",
          "logic": "implementation logic in plain English"
        }
      ],
      "additionalContext": "any other implementation details"
    }
  ]
}

NO OTHER TEXT before or after the JSON.
NO explanation.
NO conversation.
ONLY the JSON object.`;

    const response = await this.callClaude(systemPrompt, `
Requirements:
${requirements.join('\n')}

Architectural Vision:
${visionText}

Key Files to Implement:
${this.formatKeyFilesForPrompt(keyFiles)}
`);
    
    if (!response.implementationOrder || !Array.isArray(response.implementationOrder)) {
      console.error('Invalid implementation plan response:', response);
      throw new Error('Invalid implementation plan response: missing or invalid implementationOrder');
    }
    
    return response;
  }
  
  // Helper methods
  private extractKeyFiles(folder: any, path: string = "", maxFiles: number = 10): any[] {
    let allFiles: any[] = [];
    
    // Add files from current folder
    if (folder.files && Array.isArray(folder.files)) {
      const filesWithPath = folder.files.map((file: any) => ({ 
        ...file, 
        path: path || folder.name 
      }));
      allFiles = [...allFiles, ...filesWithPath];
    }
    
    // Add files from subfolders
    if (folder.subfolders && Array.isArray(folder.subfolders)) {
      for (const subfolder of folder.subfolders) {
        const subfolderPath = path ? `${path}/${subfolder.name}` : subfolder.name;
        const subfolderFiles = this.extractKeyFiles(subfolder, subfolderPath, 0); // Don't limit subfolder files yet
        allFiles = [...allFiles, ...subfolderFiles];
      }
    }
    
    // Select key files based on importance
    const keyFiles = this.selectKeyFiles(allFiles, maxFiles);
    return keyFiles;
  }
  
  private selectKeyFiles(files: any[], maxFiles: number): any[] {
    // Sort files by importance (this is a simple heuristic, could be improved)
    // Prioritize entry points, config files, and core components
    const sortedFiles = [...files].sort((a, b) => {
      // Configuration files
      if (a.name.includes('config') || a.name.endsWith('.json')) return -1;
      if (b.name.includes('config') || b.name.endsWith('.json')) return 1;
      
      // Entry points
      if (a.name.includes('main') || a.name.includes('index') || a.name.includes('app')) return -1;
      if (b.name.includes('main') || b.name.includes('index') || b.name.includes('app')) return 1;
      
      // By file extension priority
      const extA = a.name.split('.').pop();
      const extB = b.name.split('.').pop();
      
      const priority = {
        'js': 1, 'ts': 1, 'jsx': 1, 'tsx': 1,
        'py': 1, 'java': 1, 'rb': 1,
        'html': 2, 'css': 2,
        'md': 3, 'json': 3,
      };
      
      return (priority[extA] || 99) - (priority[extB] || 99);
    });
    
    // Limit to maxFiles
    if (maxFiles > 0 && sortedFiles.length > maxFiles) {
      return sortedFiles.slice(0, maxFiles);
    }
    
    return sortedFiles;
  }
  
  private formatKeyFilesForPrompt(files: any[]): string {
    return files.map(file => 
      `- ${file.path}/${file.name}: ${file.description}`
    ).join('\n');
  }
}

export const architectService = ArchitectService.getInstance();
