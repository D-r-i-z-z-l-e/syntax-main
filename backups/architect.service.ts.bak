import { ArchitectLevel1, ArchitectLevel2, ArchitectLevel3 } from '../types/architect';

class ArchitectService {
  private static instance: ArchitectService;
  private readonly MODEL = 'claude-3-5-sonnet-latest';
  private apiKey: string;

  private constructor() {
    this.apiKey = process.env.CLAUDE_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('CLAUDE_API_KEY environment variable is required');
    }
  }

  public static getInstance(): ArchitectService {
    if (!ArchitectService.instance) {
      ArchitectService.instance = new ArchitectService();
    }
    return ArchitectService.instance;
  }

  private async callClaude(systemPrompt: string, userMessage: string) {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01',
        'x-api-key': this.apiKey,
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        model: this.MODEL,
        max_tokens: 4096,
        temperature: 0.7,
        system: systemPrompt,
        messages: [{ role: 'user', content: userMessage }]
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return JSON.parse(data.content[0].text);
  }

  async generateLevel1(requirements: string[]): Promise<ArchitectLevel1> {
    const systemPrompt = `You are an expert software architect with decades of experience. Analyze the provided requirements and create a comprehensive architectural vision. Format your response as a JSON object with a single field "visionText" containing your detailed analysis.

Cover:
1. System Architecture Overview
2. Implementation Strategy
3. Technical Considerations
4. Best Practices & Patterns
5. Potential Challenges
6. Integration Points
7. Scalability Considerations
8. Security Measures`;

    return this.callClaude(systemPrompt, `Requirements:\n${requirements.join('\n')}`);
  }

  async generateLevel2(requirements: string[], visionText: string): Promise<ArchitectLevel2> {
    const systemPrompt = `You are an expert software architect. Based on the requirements and architectural vision, create a detailed folder structure for the project. Your response should be a JSON object with a "rootFolder" field containing the nested folder structure.

Each folder should have:
- name: Folder name
- description: What the folder contains
- purpose: Why this folder exists
- subfolders: Array of nested folders (optional)

Focus on creating a clean, maintainable structure that follows best practices and the architectural vision.`;

    return this.callClaude(systemPrompt, `
Requirements:
${requirements.join('\n')}

Architectural Vision:
${visionText}`);
  }

  async generateLevel3(
    requirements: string[],
    visionText: string,
    folderStructure: ArchitectLevel2
  ): Promise<ArchitectLevel3> {
    const systemPrompt = `You are an expert software architect. Create a detailed implementation plan for all required files in the project. Your response should be a JSON object with an "implementationOrder" array of FileContext objects.

For each file:
- List all dependencies
- Describe all components
- Detail implementation requirements
- Provide complete context for implementation
- Specify the exact order of implementation

Order files based on dependencies, starting with the most independent files.`;

    return this.callClaude(systemPrompt, `
Requirements:
${requirements.join('\n')}

Architectural Vision:
${visionText}

Folder Structure:
${JSON.stringify(folderStructure, null, 2)}`);
  }
}

export const architectService = ArchitectService.getInstance();
