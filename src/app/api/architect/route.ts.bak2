import { NextRequest, NextResponse } from 'next/server';
import { architectService } from '../../../lib/services/architect.service';
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { level, requirements, visionText, folderStructure } = body;
    
    // Add detailed logging
    console.log('Architect API request:', {
      level,
      requirementsLength: requirements?.length,
      hasVisionText: !!visionText,
      hasFolderStructure: !!folderStructure,
      folderStructureDetails: folderStructure ? 
        {
          hasRootFolder: !!folderStructure.rootFolder,
          rootFolderName: folderStructure.rootFolder?.name
        } : 'No folder structure'
    });
    
    if (!requirements || !Array.isArray(requirements)) {
      console.error('Missing requirements array');
      return NextResponse.json({ error: 'Valid requirements array is required' }, { status: 400 });
    }
    
    let result;
    switch (level) {
      case 1:
        result = await architectService.generateLevel1(requirements);
        break;
      case 2:
        if (!visionText) {
          console.error('Missing vision text for level 2');
          return NextResponse.json({ error: 'Vision text is required for level 2' }, { status: 400 });
        }
        result = await architectService.generateLevel2(requirements, visionText);
        break;
      case 3:
        if (!visionText) {
          console.error('Missing vision text for level 3');
          return NextResponse.json({ error: 'Vision text is required for level 3' }, { status: 400 });
        }
        
        console.log('Level 3 folderStructure check:', {
          folderStructure: JSON.stringify(folderStructure, null, 2),
          type: typeof folderStructure,
          hasRootFolder: folderStructure && typeof folderStructure === 'object' && 'rootFolder' in folderStructure
        });
        
        if (!folderStructure || !folderStructure.rootFolder) {
          console.error('Missing folder structure for level 3', { folderStructure });
          return NextResponse.json({ error: 'Missing required input for level 3: folder structure' }, { status: 400 });
        }
        
        result = await architectService.generateLevel3(requirements, visionText, folderStructure);
        break;
      default:
        console.error('Invalid architect level:', level);
        return NextResponse.json({ error: 'Invalid architect level' }, { status: 400 });
    }
    
    console.log('Architect API success result:', { 
      resultType: typeof result,
      hasResult: !!result 
    });
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('Error in architect API:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to generate architect output' },
      { status: 500 }
    );
  }
}
